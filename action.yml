# Mirrors action/download-artifact, taking many of the same parameters, but download from S3 instead of GitHub.
# based on open-turo/actions-s3-artifact
# See: https://github.com/open-turo/actions-s3-artifact/blob/main/download/action.yaml
name: Download AWS S3 Artifact
author: NinjaManatee
description: Downloads an artifact from an AWS S3 bucket
branding:
  icon: download-cloud
  color: blue

# Inputs, outputs and descriptions pulled from actions/download-artifact
inputs:
  name:
    description: Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
    required: false
  path:
    description: Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
    required: false
  # TODO: implement pattern
  pattern:
    description: A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.
    required: false
  # TODO: implement merge-multiple
  merge-multiple:
    description: >
      When multiple artifacts are matched, this changes the behavior of the destination directories.
      If true, the downloaded artifacts will be in the same directory specified by path.
      If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
    required: false
    default: false
  repository:
    description: >
      The repository owner and the repository name joined together by "/".
      If github-token is specified, this is the repository that artifacts will be downloaded from. The default is
      github.repository.
    required: false
  run-id:
    description: >
      The id of the workflow run where the desired download artifact was uploaded from.
      If github-token is specified, this is the run that artifacts will be downloaded from.
      required: false
    default: github.run_id
outputs:
  download-path:
    description: Path of artifact download

runs:
  using: 'composite'
  steps:
    - name: Download artifact
      shell: bash
      run: |
        # read inputs into variables
        export INPUT_NAME="${{ inputs.name }}"
        if [[ "${{ inputs.path }}" == "" ]]; then
          export INPUT_PATH="${{ github.workspace }}"
        else
          # Because of some weirdness with bash GitHub action steps work, if you pass in a string that ends with a 
          # backslash character (e.g. a windows style path that ends with a backslash) and you put quotes around the 
          # input, then you get the error `unexpected EOF while looking for matching "'"`, and the script crashes. To 
          # work around this issue, this action writes the input to a text file, then reads the text file to get the 
          # value of the passed in variable, minus the backslash at the end.
          TMP_FILE="$(mktemp)"
          echo ${{ inputs.name }} > "$TMP_FILE"
          INPUT_PATH=$(cat "$TMP_FILE")
          rm "$TMP_FILE"        
          export INPUT_PATH="$INPUT_PATH"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Need to make sure path in INPUT_PATH is a unix path
            export INPUT_PATH="$(cygpath -u "$INPUT_PATH")"
          fi
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Need to make sure path in INPUT_PATH is a unix path
          INPUT_PATH=$(cygpath -u "$INPUT_PATH")
        fi
        export INPUT_PATTERN="${{ inputs.pattern }}"
        export INPUT_MERGE_MULTIPLE="${{ inputs.merge-multiple }}"
        if [[ "${{ inputs.repository }}" == "" ]]; then
          export INPUT_REPOSITORY="${{ github.repository }}"
        else
          export INPUT_REPOSITORY="${{ inputs.repository }}"
        fi
        if [[ "${{ inputs.run_id }}" == "" ]]; then
          export INPUT_RUN_ID="${{ github.run_id }}"
        else
          export INPUT_RUN_ID="${{ inputs.run_id }}"
        fi

        # read github actions variables
        export RUNNER_OS="${{ runner.os }}"

        ACTION_PATH=$GITHUB_ACTION_PATH
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Need to make sure path in ACTION_PATH is a unix path
          ACTION_PATH=$(cygpath -u "$ACTION_PATH")
        fi

        # run script
        $ACTION_PATH/scripts/main.sh